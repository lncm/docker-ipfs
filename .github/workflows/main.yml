name: Build & deploy lncm/ipfs on a git tag push

on:
  push:
    tags:
      - '*'

jobs:
  build:
    name: Build IPFS
    runs-on: ubuntu-18.04

    env:
      DOCKER_BUILDKIT: 1

    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
          - arm32v6
          - arm32v7

    steps:
      - uses: actions/checkout@v1.0.0

      - name: Setup environment
        run: |
          VERSION="$(echo "${GITHUB_REF}" | grep 'refs/tags/' | awk -F/ '{print $NF}')"
          echo ::set-env name=VERSION::"${VERSION}"

          # For `arm64v8` docker images use different notation than in lncm images (`arm64` vs `arm64v8`)
          #   This condition fixes it, by passing the correct version into the Dockerfile
          ARCH="${{matrix.arch}}"
          if [[ "${ARCH}" == "arm64" ]]; then
            ARCH="arm64v8"
          fi
          echo ::set-env name=ARCH::"${ARCH}"

          # Only run tests on `amd64` as all others exit with exec error
          TEST_LEVEL="none"
          if [[ "${ARCH}" == "amd64" ]]; then
            TEST_LEVEL="simple"
          fi
          echo ::set-env name=TEST_LEVEL::"${TEST_LEVEL}"

      # TODO: add labels, see: https://github.com/lncm/docker-lnd/blob/3a26bc667c441e94958b876170f87d538cb5a07a/.github/workflows/on-tag.yml#L102-L107
      - name: Build ipfs in Docker
        run: >
          docker build --no-cache .
          --build-arg "VERSION=${VERSION}"
          --build-arg "ARCH=${ARCH}"
          --build-arg "TEST_LEVEL=${TEST_LEVEL}"
          --tag       "ipfs:${{matrix.arch}}"

      - name: Show built image details
        run: docker images ipfs

      - name: Save image to a .tgz file
        run: |
          mkdir -p image/
          docker save "ipfs:${{matrix.arch}}" | gzip > "image/ipfs-${{matrix.arch}}.tgz"

      - name: Print sha256sum of produced Docker image
        run: sha256sum "image/ipfs-${{matrix.arch}}.tgz"

      - name: Add Docker image as build artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: docker-images
          path: image/

      - name: Extract binary from the built image
        run: |
          mkdir -p binary/
          ID=$(docker create "ipfs:${{matrix.arch}}")
          docker cp  "${ID}:/bin/ipfs"  binary/
          docker rm  "${ID}"
          gzip -S "-${{matrix.arch}}.gz" binary/ipfs

      - name: Print sha256sum of extracted binary
        run: sha256sum binary/*

      - name: Add raw binary as build artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: binaries
          path: binary/


  docker-hub-push:
    name: Tag & deploy to Docker Hub.  Only after successful build, and test of a pushed git tag

    runs-on: ubuntu-18.04
    needs: build
    steps:
      - uses: actions/checkout@v1.0.0

      - name: Enable Docker manifest features
        run: |
          mkdir -p ~/.docker

          echo '{ "experimental": "enabled" }' > ~/.docker/config.json

          sudo systemctl restart docker

      - name: Setup environment
        run: |
          VERSION="$(echo "${GITHUB_REF}" | grep 'refs/tags/' | awk -F/ '{print $NF}')"
          echo ::set-env name=VERSION::"${VERSION}"

          echo ::set-env name=SLUG::"$(echo ${GITHUB_REPOSITORY,,} | sed 's/docker-//')"

      - name: Print Docker version
        run: docker version

      - name: Download build artifact
        uses: actions/download-artifact@v1.0.0
        with:
          name: docker-images

      - name: Print sha256sum of downloaded images
        run: sha256sum docker-images/*

      - name: Load images locally
        run: ls docker-images/ | xargs -I % docker load -i "docker-images/%"

      - name: List all tagged images
        run: docker images ipfs

      - name: Version-tag all images
        run: |
          for arch in $(docker images ipfs --format "{{.Tag}}"); do
            docker tag  "ipfs:${arch}"  "${SLUG}:${VERSION}-linux-${arch}"
          done

      - name: List all tagged images
        run: docker images "${SLUG}"

      - name: Login to Docker Hub
        run: echo "${{secrets.DOCKER_TOKEN}}" | docker login -u="meedamian" --password-stdin

      - name: Push all images
        run: |
          for image in $(docker images "${SLUG}" --format "{{.Repository}}:{{.Tag}}"); do
            docker push "${image}"
          done

      - name: Get convenience Docker tag suggestions
        id: tags
        uses: meeDamian/tag-suggestions@v1.0.2

      - name: Create version-exact manifest
        run: ./scripts/ci-create-manifest.sh  "${SLUG}"  "${VERSION}"

      - name: Create minor-version manifest
        if: steps.tags.outputs.minor != ''
        run: ./scripts/ci-create-manifest.sh  "${SLUG}"  "${VERSION}"  "${{steps.tags.outputs.minor}}"

      - name: Create major-version manifest
        if: steps.tags.outputs.major != ''
        run: ./scripts/ci-create-manifest.sh  "${SLUG}"  "${VERSION}"  "${{steps.tags.outputs.major}}"

      - name: Create latest-version manifest
        if: steps.tags.outputs.latest != ''
        run: ./scripts/ci-create-manifest.sh  "${SLUG}"  "${VERSION}"  "${{steps.tags.outputs.latest}}"

      - name: List all tagged images
        run: docker images "${SLUG}"


  github-release:
    name: Create Github Release. Only after successful build of a pushed git tag
    runs-on: ubuntu-18.04
    needs: build
    steps:
      - name: Download binaries from build artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: binaries

      - name: Print checksums of binaries
        run: sha256sum binaries/*

      - name: Upload binaries to Github Release
        uses: meeDamian/github-release@v1.0.0
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          gzip: false
          files: binaries/*
