name: Build & deploy lncm/ipfs on a git tag push

on:
  push:
    tags: [ '*' ]

jobs:
  build:
    name: Build IPFS
    runs-on: ubuntu-18.04

    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
          - arm32v6
          - arm32v7

        flavor:
          - fuse
          - nofuse

    env:
      DOCKER_BUILDKIT: 1
      APP: ipfs
      FLAV_ARCH: "${{matrix.flavor}}-${{matrix.arch}}"

    steps:
      - uses: actions/checkout@v1.0.0

      ## Set full name of a git-${TAG}
      #   fmt:  vX.Y.Z[+build<N>]
      #   NOTE: Fails if TAG is not found
      - name: Set TAG (env var)
        run: |
          TAG="$(echo "${GITHUB_REF}" | grep 'refs/tags/' | awk -F/ '{print $NF}')"
          if [[ -z "${TAG}" ]]; then
            echo "This action has to be run on a git-tag push"
            exit 1
          fi
          echo ::set-env name=TAG::"${TAG}"

      ## Set target ${ARCH}-itecture for Docker Image built in this job.  Used in `final` stage as: `FROM ${ARCH}/alpine:â€¦`
      #   fmt:  amd64|arm32v6|arm32v8|arm64v8
      #   NOTE: Replace `arm64` with `arm64v8`
      - name: Set ARCH (env var)
        run: |
          ARCH=${{matrix.arch}}
          if [[ "${{matrix.arch}}" == "arm64" ]]; then
            ARCH="arm64v8"
          fi
          echo ::set-env name=ARCH::"${ARCH}"

      ## Set ${BUILD} number out of the pushed git-tag
      #   fmt:  build<N>
      #   NOTE: Fails if BUILD tag was not set
      - name: Set BUILD (env var)
        run: |
          BUILD="$(echo "+${TAG}" | cut -d+ -f3)"
          if [[ -z "${BUILD}" ]]; then
            echo "ERR '+build<N>' must be appended to the git tag"
            exit 1
          fi
          echo ::set-env name=BUILD::"${BUILD}"

      ## Set ${TEST_LEVEL} based on target architecture
      #   fmt:  none|simple|advanced
      #   NOTE: Fails if BUILD tag was not set
      - name: Set TEST_LEVEL (env var)
        run: |
          TEST_LEVEL=none
          if [[ "${{matrix.arch}}" == "amd64" ]]; then
            TEST_LEVEL=advanced
          fi
          echo ::set-env name=TEST_LEVEL::"${TEST_LEVEL}"

      - name: Set GOARCH & GOARM (env vars)
        if: matrix.arch != 'amd64'
        run: |
          GOARCH="$(echo "${{matrix.arch}}" | grep -oE 'arm(64)?')"
          echo ::set-env name=GOARCH::"${GOARCH}"

          GOARM="$(echo "${{matrix.arch}}" | grep arm32 | tail -c 2)"
          echo ::set-env name=GOARM::"${GOARM}"

      - name: Print ENV VARs set above
        run: |
          printf "Git tag & arch processed:\n"
          printf "    APP: %s\n"            "${APP}"
          printf "   ARCH: %s (from %s)\n"  "${ARCH}" "${{matrix.arch}}"
          printf "    TAG: %s\n"            "${TAG}"
          printf " FLAVOR: %s\n"            "${{matrix.flavor}}"
          printf "  BUILD: %s\n"            "${BUILD}"
          printf "TEST_LE: %s\n"            "${TEST_LEVEL}"
          printf " GOARCH: %s\n"            "${GOARCH}"
          printf "  GOARM: %s\n"            "${GOARM}"

      # TODO: add labels, see: https://github.com/lncm/docker-lnd/blob/3a26bc667c441e94958b876170f87d538cb5a07a/.github/workflows/on-tag.yml#L102-L107
      - name: Build IPFS
        run: >
          docker build --no-cache .
          --build-arg "TEST_LEVEL=${TEST_LEVEL}"
          --build-arg "ARCH=${ARCH}"
          --build-arg "GOARCH=${GOARCH}"
          --build-arg "GOARM=${GOARM}"
          --target    "final-${{matrix.flavor}}"
          --tag       "${APP}:${FLAV_ARCH}"

      - name: Register self-compiled qemu
        if: matrix.flavor == 'fuse' && matrix.arch != 'amd64'
        env:
          QEMU_VERSION: v4.2.0
        run: docker run --rm --privileged "meedamian/simple-qemu:${QEMU_VERSION}-${{matrix.arch}}" -p yes

      # For the `fuse` flavor trigger all `ONBUILD`s to make sure fuse is available
      - name: Expand fuse
        if: matrix.flavor == 'fuse'
        run: >
          docker build .
          --build-arg "TEST_LEVEL=${TEST_LEVEL}"
          --build-arg "ARCH=${ARCH}"
          --build-arg "GOARCH=${GOARCH}"
          --build-arg "GOARM=${GOARM}"
          --build-arg "FLAVOR=fuse"
          --tag       "${APP}:${FLAV_ARCH}"

      - name: Show built image details
        run: docker images "${APP}"

      - name: Save image to a .tgz file
        run: |
          mkdir -p image/
          docker save "${APP}:${FLAV_ARCH}" | gzip > "image/${APP}-${FLAV_ARCH}.tgz"

      - name: Print sha256sum of produced Docker image
        run: sha256sum "image/${APP}-${FLAV_ARCH}.tgz"

      - name: Add Docker image as build artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: docker-images
          path: image/

      - name: Extract binary from the built image
        run: |
          mkdir -p binary/
          ID=$(docker create "${APP}:${FLAV_ARCH}")
          docker cp  "${ID}:/bin/${APP}"  binary/
          docker rm  "${ID}"
          gzip -S "-${FLAV_ARCH}.gz"  "binary/${APP}"

      - name: Print sha256sum of extracted binary
        run: sha256sum binary/*

      - name: Add raw binary as build artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: binaries
          path: binary/


  docker-hub-push:
    name: Tag & deploy to Docker Hub.  Only after successful build, and test of a pushed git tag

    runs-on: ubuntu-18.04
    needs: build
    steps:
      - uses: actions/checkout@v1.0.0

      - name: Enable Docker manifest features
        run: |
          mkdir -p ~/.docker
          echo '{ "experimental": "enabled" }' > ~/.docker/config.json
          sudo systemctl restart docker

      - name: Setup environment
        run: |
          VERSION="$(echo "${GITHUB_REF}" | grep 'refs/tags/' | awk -F/ '{print $NF}')"
          echo ::set-env name=VERSION::"${VERSION}"

          echo ::set-env name=SLUG::"$(echo ${GITHUB_REPOSITORY,,} | sed 's/docker-//')"

      - name: Print Docker version
        run: docker version

      - name: Download build artifact
        uses: actions/download-artifact@v1.0.0
        with:
          name: docker-images

      - name: Print sha256sum of downloaded images
        run: sha256sum docker-images/*

      - name: Load images locally
        run: ls docker-images/ | xargs -I % docker load -i "docker-images/%"

      - name: List all tagged images
        run: docker images ipfs

      - name: Version-tag all images
        run: |
          for arch in $(docker images ipfs --format "{{.Tag}}"); do
            docker tag  "ipfs:${arch}"  "${SLUG}:${VERSION}-linux-${arch}"
          done

      - name: List all tagged images
        run: docker images "${SLUG}"

      - name: Login to Docker Hub
        run: echo "${{secrets.DOCKER_TOKEN}}" | docker login -u="meedamian" --password-stdin

      - name: Push all images
        run: |
          for image in $(docker images "${SLUG}" --format "{{.Repository}}:{{.Tag}}"); do
            docker push "${image}"
          done

      - name: Get convenience Docker tag suggestions
        id: tags
        uses: meeDamian/tag-suggestions@v1.0.3

      - name: Create version-exact manifest
        run: ./scripts/ci-create-manifest.sh  "${SLUG}"  "${VERSION}"

      - name: Create minor-version manifest
        if: steps.tags.outputs.minor != ''
        run: ./scripts/ci-create-manifest.sh  "${SLUG}"  "${VERSION}"  "${{steps.tags.outputs.minor}}"

      - name: Create major-version manifest
        if: steps.tags.outputs.major != ''
        run: ./scripts/ci-create-manifest.sh  "${SLUG}"  "${VERSION}"  "${{steps.tags.outputs.major}}"

      - name: Create latest-version manifest
        if: steps.tags.outputs.latest != ''
        run: ./scripts/ci-create-manifest.sh  "${SLUG}"  "${VERSION}"  "${{steps.tags.outputs.latest}}"

      - name: List all tagged images
        run: docker images "${SLUG}"


  github-release:
    name: Create Github Release. Only after successful build of a pushed git tag
    runs-on: ubuntu-18.04
    needs: build
    steps:
      - name: Download binaries from build artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: binaries

      - name: Print checksums of binaries
        run: sha256sum binaries/*

      - name: Upload binaries to Github Release
        uses: meeDamian/github-release@v1.0.0
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          gzip: false
          files: binaries/*
